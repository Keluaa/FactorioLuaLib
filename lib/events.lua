
--- @class CustomInputEvent
--- Called when a CustomInput is activated.

--- @shape CustomInputEvent_data : EventData
--- @field player_index uint             The player that activated the custom input.
--- @field input_name string             The prototype name of the custom input that was activated.
--- @field cursor_position MapPosition   The mouse cursor position when the custom input was activated.
--- @field selected_prototype SelectedPrototypeData | nil (Optional)  Information about the prototype that is selected when the custom input is used. `nil` if none is selected.


--- @class on_ai_command_completed
--- Called when a unit/group completes a command.

--- @shape on_ai_command_completed_data : EventData
--- @field unit_number uint              unit_number/group_number of the unit/group which just completed a command.
--- @field result defines_behavior_result 
--- @field was_distracted boolean        Was this command generated by a distraction.


--- @class on_area_cloned
--- Called when an area of the map is cloned.

--- @shape on_area_cloned_data : EventData
--- @field source_surface LuaSurface     
--- @field source_area BoundingBox       
--- @field destination_surface LuaSurface 
--- @field destination_area BoundingBox  
--- @field destination_force LuaForce | nil (Optional)  
--- @field clone_tiles boolean           
--- @field clone_entities boolean        
--- @field clone_decoratives boolean     
--- @field clear_destination_entities boolean 
--- @field clear_destination_decoratives boolean 


--- @class on_biter_base_built
--- Called when a biter migration builds a base.

--- @shape on_biter_base_built_data : EventData
--- @field entity LuaEntity              The entity that was built.


--- @class on_brush_cloned
--- Called when a set of positions on the map is cloned.

--- @shape on_brush_cloned_data : EventData
--- @field source_offset TilePosition    
--- @field destination_offset TilePosition 
--- @field source_surface LuaSurface     
--- @field source_positions TilePosition[] 
--- @field destination_surface LuaSurface 
--- @field destination_force LuaForce | nil (Optional)  
--- @field clone_tiles boolean           
--- @field clone_entities boolean        
--- @field clone_decoratives boolean     
--- @field clear_destination_entities boolean 
--- @field clear_destination_decoratives boolean 


--- @class on_build_base_arrived
--- Called when a defines.command.build_base command reaches its destination, and before building starts.
--- 
--- @see defines.command#build_base @

--- @shape on_build_base_arrived_data : EventData
--- @field unit LuaEntity | nil          (Optional)  The unit the command was assigned to.
--- @field group LuaUnitGroup | nil      (Optional)  The unit group the command was assigned to.


--- @class on_built_entity
--- Called when player builds something. Can be filtered using LuaPlayerBuiltEntityEventFilter.
--- 
--- @see LuaPlayerBuiltEntityEventFilter @

--- @shape on_built_entity_data : EventData
--- @field created_entity LuaEntity      
--- @field player_index uint             
--- @field stack LuaItemStack            
--- @field item LuaItemPrototype | nil   (Optional)  The item prototype used to build the entity. Note this won't exist in some situations (built from blueprint, undo, etc).
--- @field tags Tags | nil               (Optional)  The tags associated with this entity if any.


--- @class on_cancelled_deconstruction
--- Called when the deconstruction of an entity is canceled. Can be filtered using
--- LuaEntityDeconstructionCancelledEventFilter.
--- 
--- @see LuaEntityDeconstructionCancelledEventFilter @

--- @shape on_cancelled_deconstruction_data : EventData
--- @field entity LuaEntity              
--- @field player_index uint | nil       (Optional)  


--- @class on_cancelled_upgrade
--- Called when the upgrade of an entity is canceled. Can be filtered using LuaUpgradeCancelledEventFilter.
--- 
--- @see LuaUpgradeCancelledEventFilter @

--- @shape on_cancelled_upgrade_data : EventData
--- @field entity LuaEntity              
--- @field player_index uint | nil       (Optional)  


--- @class on_character_corpse_expired
--- Called when a character corpse expires due to timeout or all of the items being removed from it.

--- @shape on_character_corpse_expired_data : EventData
--- @field corpse LuaEntity              The corpse.


--- @class on_chart_tag_added
--- Called when a chart tag is created.

--- @shape on_chart_tag_added_data : EventData
--- @field tag LuaCustomChartTag         
--- @field force LuaForce                
--- @field player_index uint | nil       (Optional)  


--- @class on_chart_tag_modified
--- Called when a chart tag is modified by a player.

--- @shape on_chart_tag_modified_data : EventData
--- @field tag LuaCustomChartTag         
--- @field player_index uint | nil       (Optional)  
--- @field force LuaForce                
--- @field old_text string               
--- @field old_icon SignalID | nil       (Optional)  
--- @field old_player uint | nil         (Optional)  


--- @class on_chart_tag_removed
--- Called just before a chart tag is deleted.

--- @shape on_chart_tag_removed_data : EventData
--- @field tag LuaCustomChartTag         
--- @field force LuaForce                
--- @field player_index uint | nil       (Optional)  


--- @class on_chunk_charted
--- Called when a chunk is charted or re-charted.

--- @shape on_chunk_charted_data : EventData
--- @field surface_index uint            
--- @field position ChunkPosition        
--- @field area BoundingBox              Area of the chunk.
--- @field force LuaForce                


--- @class on_chunk_deleted
--- Called when one or more chunks are deleted using LuaSurface::delete_chunk.
--- 
--- @see LuaSurface#delete_chunk @

--- @shape on_chunk_deleted_data : EventData
--- @field surface_index uint            
--- @field positions ChunkPosition[]     The chunks deleted.


--- @class on_chunk_generated
--- Called when a chunk is generated.

--- @shape on_chunk_generated_data : EventData
--- @field area BoundingBox              Area of the chunk.
--- @field position ChunkPosition        Position of the chunk.
--- @field surface LuaSurface            The surface the chunk is on.


--- @class on_combat_robot_expired
--- Called when a combat robot expires through a lack of energy, or timeout.

--- @shape on_combat_robot_expired_data : EventData
--- @field robot LuaEntity               
--- @field owner LuaEntity | nil         (Optional)  The entity that owns the robot if any.


--- @class on_console_chat
--- Called when a message is sent to the in-game console, either by a player or through the server interface.

--- @shape on_console_chat_data : EventData
--- @field player_index uint | nil       (Optional)  The player doing the chatting, if any.
--- @field message string                The chat message that was sent.


--- @class on_console_command
--- Called when someone enters a command-like message regardless of it being a valid command.

--- @shape on_console_command_data : EventData
--- @field player_index uint | nil       (Optional)  The player if any.
--- @field command string                The command as typed without the preceding forward slash ('/').
--- @field parameters string             The parameters provided if any.


--- @class on_cutscene_cancelled
--- Called when a cutscene is cancelled by the player or by script.

--- @shape on_cutscene_cancelled_data : EventData
--- @field player_index uint             The player the cutscene was shown to.


--- @class on_cutscene_waypoint_reached
--- Called when a cutscene is playing, each time it reaches a waypoint in that cutscene.
--- This refers to an index in the table previously passed to set_controller which started the cutscene.

--- @shape on_cutscene_waypoint_reached_data : EventData
--- @field player_index uint             The player index of the player viewing the cutscene.
--- @field waypoint_index uint           The index of the waypoint we just completed.


--- @class on_difficulty_settings_changed
--- Called when the map difficulty settings are changed.

--- @shape on_difficulty_settings_changed_data : EventData
--- @field old_recipe_difficulty uint    
--- @field old_technology_difficulty uint 


--- @class on_entity_cloned
--- Called when an entity is cloned. Can be filtered for the source entity using LuaEntityClonedEventFilter.
--- 
--- @see LuaEntityClonedEventFilter @

--- @shape on_entity_cloned_data : EventData
--- @field source LuaEntity              
--- @field destination LuaEntity         


--- @class on_entity_damaged
--- Called when an entity is damaged. Can be filtered using LuaEntityDamagedEventFilter.
--- 
--- @see LuaEntityDamagedEventFilter @

--- @shape on_entity_damaged_data : EventData
--- @field entity LuaEntity              
--- @field damage_type LuaDamagePrototype 
--- @field original_damage_amount float  The damage amount before resistances.
--- @field final_damage_amount float     The damage amount after resistances.
--- @field final_health float            The health of the entity after the damage was applied.
--- @field cause LuaEntity | nil         (Optional)  The entity that did the attacking if available.
--- @field force LuaForce | nil          (Optional)  The force that did the attacking if any.


--- @class on_entity_destroyed
--- Called after an entity is destroyed that has been registered with LuaBootstrap::register_on_entity_destroyed
--- at the end of the next tick.
--- 
--- @see LuaBootstrap#register_on_entity_destroyed @

--- @shape on_entity_destroyed_data : EventData
--- @field registration_number uint64    The number returned by [register_on_entity_destroyed](LuaBootstrap::register_on_entity_destroyed) to uniquely identify this entity during this event.
--- @field unit_number uint | nil        (Optional)  The [LuaEntity::unit_number](LuaEntity::unit_number) of the destroyed entity, if it had one.


--- @class on_entity_died
--- Called when an entity dies. Can be filtered using LuaEntityDiedEventFilter.
--- 
--- @see LuaEntityDiedEventFilter @

--- @shape on_entity_died_data : EventData
--- @field entity LuaEntity              The entity that died.
--- @field cause LuaEntity | nil         (Optional)  The entity that did the killing if available.
--- @field loot LuaInventory             The loot generated by this entity if any.
--- @field force LuaForce | nil          (Optional)  The force that did the killing if any.
--- @field damage_type LuaDamagePrototype | nil (Optional)  The damage type if any.


--- @class on_entity_logistic_slot_changed
--- Called when one of an entity's personal logistic slots changes.

--- @shape on_entity_logistic_slot_changed_data : EventData
--- @field player_index uint | nil       (Optional)  The player who changed the slot, or `nil` if changed by script.
--- @field entity LuaEntity              The entity for whom a logistic slot was changed.
--- @field slot_index uint               The slot index that was changed.


--- @class on_entity_renamed
--- Called after an entity has been renamed either by the player or through script.

--- @shape on_entity_renamed_data : EventData
--- @field player_index uint | nil       (Optional)  If by_script is true this will not be included.
--- @field by_script boolean             
--- @field entity LuaEntity              
--- @field old_name string               


--- @class on_entity_settings_pasted
--- Called after entity copy-paste is done.

--- @shape on_entity_settings_pasted_data : EventData
--- @field player_index uint             
--- @field source LuaEntity              The source entity settings were copied from.
--- @field destination LuaEntity         The destination entity settings were copied to.


--- @class on_entity_spawned
--- Called when an entity is spawned by a EnemySpawner

--- @shape on_entity_spawned_data : EventData
--- @field spawner LuaEntity             
--- @field entity LuaEntity              


--- @class on_equipment_inserted
--- Called after equipment is inserted into an equipment grid.

--- @shape on_equipment_inserted_data : EventData
--- @field grid LuaEquipmentGrid         The equipment grid inserted into.
--- @field equipment LuaEquipment        The equipment inserted.


--- @class on_equipment_removed
--- Called after equipment is removed from an equipment grid.

--- @shape on_equipment_removed_data : EventData
--- @field grid LuaEquipmentGrid         The equipment grid removed from.
--- @field equipment string              The equipment removed.
--- @field count uint                    The count of equipment removed.


--- @class on_force_cease_fire_changed
--- Called when the a forces cease fire values change.

--- @shape on_force_cease_fire_changed_data : EventData
--- @field force LuaForce                The force who's cease fire changed.
--- @field other_force LuaForce          Which force was added or removed.
--- @field added boolean                 If the other force was added or removed.


--- @class on_force_created
--- Called when a new force is created using `game.create_force()`

--- @shape on_force_created_data : EventData
--- @field force LuaForce                The newly created force.


--- @class on_force_friends_changed
--- Called when the a forces friends change.

--- @shape on_force_friends_changed_data : EventData
--- @field force LuaForce                The force who's friends changed.
--- @field other_force LuaForce          Which force was added or removed.
--- @field added boolean                 If the other force was added or removed.


--- @class on_force_reset
--- Called when LuaForce::reset is finished.
--- 
--- @see LuaForce#reset @

--- @shape on_force_reset_data : EventData
--- @field force LuaForce                


--- @class on_forces_merged
--- Called after two forces have been merged using `game.merge_forces()`.

--- @shape on_forces_merged_data : EventData
--- @field source_name string            The force destroyed.
--- @field source_index uint             The index of the destroyed force.
--- @field destination LuaForce          The force entities where reassigned to.


--- @class on_forces_merging
--- Called when two forces are about to be merged using `game.merge_forces()`.

--- @shape on_forces_merging_data : EventData
--- @field source LuaForce               The force to be destroyed
--- @field destination LuaForce          The force to reassign entities to.


--- @class on_game_created_from_scenario
--- Called when a game is created from a scenario. This is fired for every mod, even when the scenario's save data
--- already includes it. In those cases however, LuaBootstrap::on_init is not fired.
--- 
--- @see LuaBootstrap#on_init @

--- @shape on_game_created_from_scenario_data : EventData


--- @class on_gui_checked_state_changed
--- Called when LuaGuiElement checked state is changed (related to checkboxes and radio buttons).
--- 
--- @see LuaGuiElement @

--- @shape on_gui_checked_state_changed_data : EventData
--- @field element LuaGuiElement         The element whose checked state changed.
--- @field player_index uint             The player who did the change.


--- @class on_gui_click
--- Called when LuaGuiElement is clicked.
--- 
--- @see LuaGuiElement @

--- @shape on_gui_click_data : EventData
--- @field element LuaGuiElement         The clicked element.
--- @field player_index uint             The player who did the clicking.
--- @field button defines_mouse_button_type The mouse button used if any.
--- @field alt boolean                   If alt was pressed.
--- @field control boolean               If control was pressed.
--- @field shift boolean                 If shift was pressed.


--- @class on_gui_closed
--- Called when the player closes the GUI they have open.
--- This can only be raised when the GUI's player controller is still valid. If a GUI is thus closed due to the player
--- disconnecting, dying, or becoming a spectator in other ways, it won't cause this event to be raised.

--- @shape on_gui_closed_data : EventData
--- @field player_index uint             The player.
--- @field gui_type defines_gui_type     The GUI type that was open.
--- @field entity LuaEntity | nil        (Optional)  The entity that was open
--- @field item LuaItemStack | nil       (Optional)  The item that was open
--- @field equipment LuaEquipment | nil  (Optional)  The equipment that was open
--- @field other_player LuaPlayer | nil  (Optional)  The other player that was open
--- @field element LuaGuiElement | nil   (Optional)  The custom GUI element that was open
--- @field technology LuaTechnology | nil (Optional)  The technology that was automatically selected when opening the research GUI
--- @field tile_position TilePosition | nil (Optional)  The tile position that was open


--- @class on_gui_confirmed
--- Called when a LuaGuiElement is confirmed, for example by pressing Enter in a textfield.
--- 
--- @see LuaGuiElement @

--- @shape on_gui_confirmed_data : EventData
--- @field element LuaGuiElement         The confirmed element.
--- @field player_index uint             The player who did the confirming.
--- @field alt boolean                   If alt was pressed.
--- @field control boolean               If control was pressed.
--- @field shift boolean                 If shift was pressed.


--- @class on_gui_elem_changed
--- Called when LuaGuiElement element value is changed (related to choose element buttons).
--- 
--- @see LuaGuiElement @

--- @shape on_gui_elem_changed_data : EventData
--- @field element LuaGuiElement         The element whose element value changed.
--- @field player_index uint             The player who did the change.


--- @class on_gui_location_changed
--- Called when LuaGuiElement element location is changed (related to frames in `player.gui.screen`).
--- 
--- @see LuaGuiElement @

--- @shape on_gui_location_changed_data : EventData
--- @field element LuaGuiElement         The element whose location changed.
--- @field player_index uint             The player who did the change.


--- @class on_gui_opened
--- Called when the player opens a GUI.

--- @shape on_gui_opened_data : EventData
--- @field player_index uint             The player.
--- @field gui_type defines_gui_type     The GUI type that was opened.
--- @field entity LuaEntity | nil        (Optional)  The entity that was opened
--- @field item LuaItemStack | nil       (Optional)  The item that was opened
--- @field equipment LuaEquipment | nil  (Optional)  The equipment that was opened
--- @field other_player LuaPlayer | nil  (Optional)  The other player that was opened
--- @field element LuaGuiElement | nil   (Optional)  The custom GUI element that was opened


--- @class on_gui_selected_tab_changed
--- Called when LuaGuiElement selected tab is changed (related to tabbed-panes).
--- 
--- @see LuaGuiElement @

--- @shape on_gui_selected_tab_changed_data : EventData
--- @field element LuaGuiElement         The tabbed pane whose selected tab changed.
--- @field player_index uint             The player who did the change.


--- @class on_gui_selection_state_changed
--- Called when LuaGuiElement selection state is changed (related to drop-downs and listboxes).
--- 
--- @see LuaGuiElement @

--- @shape on_gui_selection_state_changed_data : EventData
--- @field element LuaGuiElement         The element whose selection state changed.
--- @field player_index uint             The player who did the change.


--- @class on_gui_switch_state_changed
--- Called when LuaGuiElement switch state is changed (related to switches).
--- 
--- @see LuaGuiElement @

--- @shape on_gui_switch_state_changed_data : EventData
--- @field element LuaGuiElement         The switch whose switch state changed.
--- @field player_index uint             The player who did the change.


--- @class on_gui_text_changed
--- Called when LuaGuiElement text is changed by the player.
--- 
--- @see LuaGuiElement @

--- @shape on_gui_text_changed_data : EventData
--- @field element LuaGuiElement         The edited element.
--- @field player_index uint             The player who did the edit.
--- @field text string                   The new text in the element.


--- @class on_gui_value_changed
--- Called when LuaGuiElement slider value is changed (related to the slider element).
--- 
--- @see LuaGuiElement @

--- @shape on_gui_value_changed_data : EventData
--- @field element LuaGuiElement         The element whose value changed.
--- @field player_index uint             The player who did the change.


--- @class on_land_mine_armed
--- Called when a land mine is armed.

--- @shape on_land_mine_armed_data : EventData
--- @field mine LuaEntity                


--- @class on_lua_shortcut
--- Called when a custom Lua shortcut is pressed.

--- @shape on_lua_shortcut_data : EventData
--- @field player_index uint             
--- @field prototype_name string         Shortcut prototype name of the shortcut that was clicked.


--- @class on_marked_for_deconstruction
--- Called when an entity is marked for deconstruction with the Deconstruction planner or via script. Can be filtered
--- using LuaEntityMarkedForDeconstructionEventFilter.
--- 
--- @see LuaEntityMarkedForDeconstructionEventFilter @

--- @shape on_marked_for_deconstruction_data : EventData
--- @field entity LuaEntity              
--- @field player_index uint | nil       (Optional)  


--- @class on_marked_for_upgrade
--- Called when an entity is marked for upgrade with the Upgrade planner or via script. Can be filtered using
--- LuaEntityMarkedForUpgradeEventFilter.
--- 
--- @see LuaEntityMarkedForUpgradeEventFilter @

--- @shape on_marked_for_upgrade_data : EventData
--- @field entity LuaEntity              
--- @field target LuaEntityPrototype     
--- @field player_index uint | nil       (Optional)  
--- @field direction defines_direction | nil (Optional)  The new direction (if any)


--- @class on_market_item_purchased
--- Called after a player purchases some offer from a `market` entity.

--- @shape on_market_item_purchased_data : EventData
--- @field player_index uint             The player who did the purchasing.
--- @field market LuaEntity              The market entity.
--- @field offer_index uint              The index of the offer purchased.
--- @field count uint                    The amount of offers purchased.


--- @class on_mod_item_opened
--- Called when the player uses the 'Open item GUI' control on an item defined with the 'mod-openable' flag

--- @shape on_mod_item_opened_data : EventData
--- @field player_index uint             The player.
--- @field item LuaItemPrototype         The item clicked on.


--- @class on_permission_group_added
--- Called directly after a permission group is added.

--- @shape on_permission_group_added_data : EventData
--- @field player_index uint             The player that added the group.
--- @field group LuaPermissionGroup      The group added.


--- @class on_permission_group_deleted
--- Called directly after a permission group is deleted.

--- @shape on_permission_group_deleted_data : EventData
--- @field player_index uint             The player doing the deletion.
--- @field group_name string             The group that was deleted.
--- @field id uint                       The group id that was deleted.


--- @class on_permission_group_edited
--- Called directly after a permission group is edited in some way.

--- @shape on_permission_group_edited_data : EventData
--- @field player_index uint             The player that did the editing.
--- @field group LuaPermissionGroup      The group being edited.
--- @field type string                   The edit type: "add-permission", "remove-permission", "enable-all", "disable-all", "add-player", "remove-player", "rename".
--- @field action defines_input_action   The action when the `type` is "add-permission" or "remove-permission".
--- @field other_player_index uint       The other player when the `type` is "add-player" or "remove-player".
--- @field old_name string               The old group name when the `type` is "rename".
--- @field new_name string               The new group name when the `type` is "rename".


--- @class on_permission_string_imported
--- Called directly after a permission string is imported.

--- @shape on_permission_string_imported_data : EventData
--- @field player_index uint             The player that imported the string.


--- @class on_picked_up_item
--- Called when a player picks up an item.

--- @shape on_picked_up_item_data : EventData
--- @field item_stack SimpleItemStack    
--- @field player_index uint             


--- @class on_player_alt_selected_area
--- Called after a player alt-selects an area with a selection-tool item.

--- @shape on_player_alt_selected_area_data : EventData
--- @field player_index uint             The player doing the selection.
--- @field surface LuaSurface            The surface selected.
--- @field area BoundingBox              The area selected.
--- @field item string                   The item used to select the area.
--- @field entities LuaEntity[]          The entities selected.
--- @field tiles LuaTile[]               The tiles selected.


--- @class on_player_ammo_inventory_changed
--- Called after a players ammo inventory changed in some way.

--- @shape on_player_ammo_inventory_changed_data : EventData
--- @field player_index uint             


--- @class on_player_armor_inventory_changed
--- Called after a players armor inventory changed in some way.

--- @shape on_player_armor_inventory_changed_data : EventData
--- @field player_index uint             


--- @class on_player_banned
--- Called when a player is banned.

--- @shape on_player_banned_data : EventData
--- @field player_index uint | nil       (Optional)  The player banned.
--- @field player_name string            The banned player name.
--- @field by_player uint | nil          (Optional)  The player that did the banning if any.
--- @field reason string | nil           (Optional)  The reason given if any.


--- @class on_player_built_tile
--- Called after a player builds tiles.

--- @shape on_player_built_tile_data : EventData
--- @field player_index uint             
--- @field surface_index uint            The surface the tile(s) were built on.
--- @field tiles OldTileAndPosition[]    The position data.
--- @field tile LuaTilePrototype         The tile prototype that was placed.
--- @field item LuaItemPrototype | nil   (Optional)  The item type used to build the tiles
--- @field stack LuaItemStack | nil      (Optional)  The stack used to build the tiles (may be empty if all of the items where used to build the tiles).


--- @class on_player_cancelled_crafting
--- Called when a player cancels crafting.

--- @shape on_player_cancelled_crafting_data : EventData
--- @field player_index uint             The player that did the crafting.
--- @field items LuaInventory            The crafting items returned to the player's inventory.
--- @field recipe LuaRecipe              The recipe that has been cancelled.
--- @field cancel_count uint             The number of crafts that have been cancelled.


--- @class on_player_changed_force
--- Called after a player changes forces.

--- @shape on_player_changed_force_data : EventData
--- @field player_index uint             The player who changed forces.
--- @field force LuaForce                The old force.


--- @class on_player_changed_position
--- Called when the tile position a player is located at changes.

--- @shape on_player_changed_position_data : EventData
--- @field player_index uint             The player.


--- @class on_player_changed_surface
--- Called after a player changes surfaces.

--- @shape on_player_changed_surface_data : EventData
--- @field player_index uint             The player who changed surfaces.
--- @field surface_index uint            The surface index the player was on.


--- @class on_player_cheat_mode_disabled
--- Called when cheat mode is disabled on a player.

--- @shape on_player_cheat_mode_disabled_data : EventData
--- @field player_index uint             The player.


--- @class on_player_cheat_mode_enabled
--- Called when cheat mode is enabled on a player.

--- @shape on_player_cheat_mode_enabled_data : EventData
--- @field player_index uint             The player.


--- @class on_player_clicked_gps_tag
--- Called when a player clicks a gps tag

--- @shape on_player_clicked_gps_tag_data : EventData
--- @field player_index uint             Index of the player
--- @field position MapPosition          Map position contained in gps tag
--- @field surface string                Surface name contained in gps tag, even when such surface does not exists


--- @class on_player_configured_blueprint
--- Called when a player clicks the "confirm" button in the configure Blueprint GUI.

--- @shape on_player_configured_blueprint_data : EventData
--- @field player_index uint             The player.


--- @class on_player_configured_spider_remote
--- Called when a player configures spidertron remote to be connected with a given spidertron

--- @shape on_player_configured_spider_remote_data : EventData
--- @field player_index uint             The player that configured the remote.
--- @field vehicle LuaEntity             Spider vehicle to which remote was connected to.


--- @class on_player_crafted_item
--- Called when the player finishes crafting an item. This event fires just before the results are inserted into the
--- player's inventory, not when the crafting is queued (see on_pre_player_crafted_item).
--- 
--- @see on_pre_player_crafted_item @

--- @shape on_player_crafted_item_data : EventData
--- @field item_stack LuaItemStack       The item that has been crafted.
--- @field player_index uint             The player doing the crafting.
--- @field recipe LuaRecipe              The recipe used to craft this item.


--- @class on_player_created
--- Called after the player was created.

--- @shape on_player_created_data : EventData
--- @field player_index uint             


--- @class on_player_cursor_stack_changed
--- Called after a players cursorstack changed in some way.

--- @shape on_player_cursor_stack_changed_data : EventData
--- @field player_index uint             


--- @class on_player_deconstructed_area
--- Called when a player selects an area with a deconstruction planner.

--- @shape on_player_deconstructed_area_data : EventData
--- @field player_index uint             The player doing the selection.
--- @field surface LuaSurface            The surface selected.
--- @field area BoundingBox              The area selected.
--- @field item string                   The item used to select the area.
--- @field alt boolean                   If normal selection or alt selection was used.


--- @class on_player_demoted
--- Called when a player is demoted.

--- @shape on_player_demoted_data : EventData
--- @field player_index uint             The player.


--- @class on_player_died
--- Called after a player dies.

--- @shape on_player_died_data : EventData
--- @field player_index uint             
--- @field cause LuaEntity | nil         (Optional)  


--- @class on_player_display_resolution_changed
--- Called when the display resolution changes for a given player.

--- @shape on_player_display_resolution_changed_data : EventData
--- @field player_index uint             The player
--- @field old_resolution DisplayResolution The old display resolution


--- @class on_player_display_scale_changed
--- Called when the display scale changes for a given player.

--- @shape on_player_display_scale_changed_data : EventData
--- @field player_index uint             The player
--- @field old_scale double              The old display scale


--- @class on_player_driving_changed_state
--- Called when the player's driving state has changed, this means a player has either entered or left a vehicle.

--- @shape on_player_driving_changed_state_data : EventData
--- @field player_index uint             
--- @field entity LuaEntity | nil        (Optional)  The vehicle if any.


--- @class on_player_dropped_item
--- Called when a player drops an item on the ground.

--- @shape on_player_dropped_item_data : EventData
--- @field player_index uint             
--- @field entity LuaEntity              The item-on-ground entity.


--- @class on_player_fast_transferred
--- Called when a player fast-transfers something to or from an entity.

--- @shape on_player_fast_transferred_data : EventData
--- @field player_index uint             The player transferred from or to.
--- @field entity LuaEntity              The entity transferred from or to.
--- @field from_player boolean           Whether the transfer was from player to entity. If `false`, the transfer was from entity to player.


--- @class on_player_flushed_fluid
--- Called after player flushed fluid

--- @shape on_player_flushed_fluid_data : EventData
--- @field player_index uint             Index of the player
--- @field fluid string                  Name of a fluid that was flushed
--- @field amount double                 Amount of fluid that was removed
--- @field entity LuaEntity              Entity from which flush was performed
--- @field only_this_entity boolean      True if flush was requested only on this entity


--- @class on_player_gun_inventory_changed
--- Called after a players gun inventory changed in some way.

--- @shape on_player_gun_inventory_changed_data : EventData
--- @field player_index uint             


--- @class on_player_joined_game
--- Called after a player joins the game.

--- @shape on_player_joined_game_data : EventData
--- @field player_index uint             


--- @class on_player_kicked
--- Called when a player is kicked.

--- @shape on_player_kicked_data : EventData
--- @field player_index uint             The player kicked.
--- @field by_player uint | nil          (Optional)  The player that did the kicking if any.
--- @field reason string | nil           (Optional)  The reason given if any.


--- @class on_player_left_game
--- Called after a player leaves the game.

--- @shape on_player_left_game_data : EventData
--- @field player_index uint             
--- @field reason defines_disconnect_reason 


--- @class on_player_main_inventory_changed
--- Called after a players main inventory changed in some way.

--- @shape on_player_main_inventory_changed_data : EventData
--- @field player_index uint             


--- @class on_player_mined_entity
--- Called after the results of an entity being mined are collected just before the entity is destroyed. After this
--- event any items in the buffer will be transferred into the player as if they came from mining the entity. Can be
--- filtered using LuaPlayerMinedEntityEventFilter.
--- 
--- @see LuaPlayerMinedEntityEventFilter @

--- @shape on_player_mined_entity_data : EventData
--- @field player_index uint             The index of the player doing the mining.
--- @field entity LuaEntity              The entity that has been mined.
--- @field buffer LuaInventory           The temporary inventory that holds the result of mining the entity.


--- @class on_player_mined_item
--- Called when the player mines something.

--- @shape on_player_mined_item_data : EventData
--- @field item_stack SimpleItemStack    The item given to the player
--- @field player_index uint             


--- @class on_player_mined_tile
--- Called after a player mines tiles.

--- @shape on_player_mined_tile_data : EventData
--- @field player_index uint             
--- @field surface_index uint            The surface the tile(s) were mined from.
--- @field tiles OldTileAndPosition[]    The position data.


--- @class on_player_muted
--- Called when a player is muted.

--- @shape on_player_muted_data : EventData
--- @field player_index uint             The player.


--- @class on_player_pipette
--- Called when a player invokes the "smart pipette" over an entity.

--- @shape on_player_pipette_data : EventData
--- @field player_index uint             The player
--- @field item LuaItemPrototype         The item put in the cursor
--- @field used_cheat_mode boolean       If cheat mode was used to give a free stack of the item.


--- @class on_player_placed_equipment
--- Called after the player puts equipment in an equipment grid

--- @shape on_player_placed_equipment_data : EventData
--- @field player_index uint             
--- @field equipment LuaEquipment        The equipment put in the equipment grid.
--- @field grid LuaEquipmentGrid         The equipment grid the equipment was put in.


--- @class on_player_promoted
--- Called when a player is promoted.

--- @shape on_player_promoted_data : EventData
--- @field player_index uint             The player.


--- @class on_player_removed
--- Called when a player is removed (deleted) from the game. Not to be confused with the player logging of this is
--- different in that the player is deleted as if he never existed in the save file.

--- @shape on_player_removed_data : EventData
--- @field player_index uint             The player index that was removed


--- @class on_player_removed_equipment
--- Called after the player removes equipment from an equipment grid

--- @shape on_player_removed_equipment_data : EventData
--- @field player_index uint             
--- @field grid LuaEquipmentGrid         The equipment grid removed from.
--- @field equipment string              The equipment removed.
--- @field count uint                    The count of equipment removed.


--- @class on_player_repaired_entity
--- Called when a player repairs an entity. Can be filtered using LuaPlayerRepairedEntityEventFilter.
--- 
--- @see LuaPlayerRepairedEntityEventFilter @

--- @shape on_player_repaired_entity_data : EventData
--- @field player_index uint             
--- @field entity LuaEntity              


--- @class on_player_respawned
--- Called after a player respawns.

--- @shape on_player_respawned_data : EventData
--- @field player_index uint             
--- @field player_port LuaEntity | nil   (Optional)  The player port used to respawn if one was used.


--- @class on_player_rotated_entity
--- Called when the player rotates an entity. This event is only fired when the entity actually changes its orientation
--- -- pressing the rotate key on an entity that can't be rotated won't fire this event.

--- @shape on_player_rotated_entity_data : EventData
--- @field entity LuaEntity              The rotated entity.
--- @field previous_direction defines_direction The previous direction
--- @field player_index uint             


--- @class on_player_selected_area
--- Called after a player selects an area with a selection-tool item.

--- @shape on_player_selected_area_data : EventData
--- @field player_index uint             The player doing the selection.
--- @field surface LuaSurface            The surface selected.
--- @field area BoundingBox              The area selected.
--- @field item string                   The item used to select the area.
--- @field entities LuaEntity[]          The entities selected.
--- @field tiles LuaTile[]               The tiles selected.


--- @class on_player_set_quick_bar_slot
--- Called when a player sets a quickbar slot to anything (new value, or set to empty).

--- @shape on_player_set_quick_bar_slot_data : EventData
--- @field player_index uint             


--- @class on_player_setup_blueprint
--- Called when a player selects an area with a blueprint.

--- @shape on_player_setup_blueprint_data : EventData
--- @field player_index uint             The player doing the selection.
--- @field surface LuaSurface            The surface selected.
--- @field area BoundingBox              The area selected.
--- @field item string                   The item used to select the area.
--- @field alt boolean                   If normal selection or alt selection was used.
--- @field mapping LuaLazyLoadedValue<table<uint, LuaEntity>> LazyLoadedValue, call 'get()' to have its value. The blueprint entity index to source entity mapping. Note: if any mod changes the blueprint this will be incorrect.


--- @class on_player_toggled_alt_mode
--- Called when a player toggles alt mode, also known as "show entity info".

--- @shape on_player_toggled_alt_mode_data : EventData
--- @field player_index uint             
--- @field alt_mode boolean              The new alt mode value. This value is a shortcut for accessing [GameViewSettings::show_entity_info](GameViewSettings::show_entity_info) on the player.


--- @class on_player_toggled_map_editor
--- Called when a player toggles the map editor on or off.

--- @shape on_player_toggled_map_editor_data : EventData
--- @field player_index uint             


--- @class on_player_trash_inventory_changed
--- Called after a players trash inventory changed in some way.

--- @shape on_player_trash_inventory_changed_data : EventData
--- @field player_index uint             


--- @class on_player_unbanned
--- Called when a player is un-banned.

--- @shape on_player_unbanned_data : EventData
--- @field player_index uint | nil       (Optional)  The player un-banned.
--- @field player_name string            The player name un-banned.
--- @field by_player uint | nil          (Optional)  The player that did the un-banning if any.
--- @field reason string | nil           (Optional)  The reason the player was banned if any.


--- @class on_player_unmuted
--- Called when a player is unmuted.

--- @shape on_player_unmuted_data : EventData
--- @field player_index uint             The player.


--- @class on_player_used_capsule
--- Called when a player uses a capsule that results in some game action.

--- @shape on_player_used_capsule_data : EventData
--- @field player_index uint             The player.
--- @field item LuaItemPrototype         The capsule item used.
--- @field position MapPosition          The position the capsule was used.


--- @class on_player_used_spider_remote
--- Called when a player uses spidertron remote to send a spidertron to a given position

--- @shape on_player_used_spider_remote_data : EventData
--- @field player_index uint             The player that used the remote.
--- @field vehicle LuaEntity             Spider vehicle which was requested to move.
--- @field position MapPosition          Goal position to which spidertron was sent to.
--- @field success boolean               If the use was successful. It may fail when spidertron has different driver or when player is on different surface.


--- @class on_post_entity_died
--- Called after an entity dies. Can be filtered using LuaPostEntityDiedEventFilter.
--- 
--- @see LuaPostEntityDiedEventFilter @

--- @shape on_post_entity_died_data : EventData
--- @field ghost LuaEntity | nil         (Optional)  The ghost created by the entity dying if any.
--- @field force LuaForce | nil          (Optional)  The force that did the killing if any.
--- @field position MapPosition          Position where the entity died.
--- @field prototype LuaEntityPrototype  The entity prototype of the entity that died.
--- @field damage_type LuaDamagePrototype | nil (Optional)  The damage type if any.
--- @field corpses LuaEntity[]           The corpses created by the entity dying if any.
--- @field surface_index uint            The surface the entity was on.
--- @field unit_number uint | nil        (Optional)  The unit number the entity had if any.


--- @class on_pre_build
--- Called when players uses an item to build something. Called before on_built_entity.
--- 
--- @see on_built_entity @

--- @shape on_pre_build_data : EventData
--- @field player_index uint             The player who did the placing.
--- @field position MapPosition          Where the item was placed.
--- @field shift_build boolean           Item was placed using shift building.
--- @field direction defines_direction   The direction the item was facing when placed.
--- @field flip_horizontal boolean       If building this blueprint was flipped horizontally.
--- @field flip_vertical boolean         If building this blueprint was flipped vertically.
--- @field created_by_moving boolean     Item was placed while moving.


--- @class on_pre_chunk_deleted
--- Called before one or more chunks are deleted using LuaSurface::delete_chunk.
--- 
--- @see LuaSurface#delete_chunk @

--- @shape on_pre_chunk_deleted_data : EventData
--- @field surface_index uint            
--- @field positions ChunkPosition[]     The chunks to be deleted.


--- @class on_pre_entity_settings_pasted
--- Called before entity copy-paste is done.

--- @shape on_pre_entity_settings_pasted_data : EventData
--- @field player_index uint             
--- @field source LuaEntity              The source entity settings will be copied from.
--- @field destination LuaEntity         The destination entity settings will be copied to.


--- @class on_pre_ghost_deconstructed
--- Called before a ghost entity is destroyed as a result of being marked for deconstruction. Can be filtered using
--- LuaPreGhostDeconstructedEventFilter.
--- 
--- @see LuaPreGhostDeconstructedEventFilter @

--- @shape on_pre_ghost_deconstructed_data : EventData
--- @field player_index uint | nil       (Optional)  The player that did the deconstruction if any.
--- @field ghost LuaEntity               


--- @class on_pre_permission_group_deleted
--- Called directly before a permission group is deleted.

--- @shape on_pre_permission_group_deleted_data : EventData
--- @field player_index uint             The player doing the deletion.
--- @field group LuaPermissionGroup      The group to be deleted.


--- @class on_pre_permission_string_imported
--- Called directly before a permission string is imported.

--- @shape on_pre_permission_string_imported_data : EventData
--- @field player_index uint             The player importing the string.


--- @class on_pre_player_crafted_item
--- Called when a player queues something to be crafted.

--- @shape on_pre_player_crafted_item_data : EventData
--- @field player_index uint             The player doing the crafting.
--- @field recipe LuaRecipe              The recipe being queued.
--- @field items LuaInventory            The items removed from the players inventory to do the crafting.
--- @field queued_count uint             The number of times the recipe is being queued.


--- @class on_pre_player_died
--- Called before a players dies.

--- @shape on_pre_player_died_data : EventData
--- @field player_index uint             
--- @field cause LuaEntity | nil         (Optional)  


--- @class on_pre_player_left_game
--- Called before a player leaves the game.

--- @shape on_pre_player_left_game_data : EventData
--- @field player_index uint             
--- @field reason defines_disconnect_reason 


--- @class on_pre_player_mined_item
--- Called when the player finishes mining an entity, before the entity is removed from map. Can be filtered using
--- LuaPrePlayerMinedEntityEventFilter.
--- 
--- @see LuaPrePlayerMinedEntityEventFilter @

--- @shape on_pre_player_mined_item_data : EventData
--- @field entity LuaEntity              The entity being mined
--- @field player_index uint             


--- @class on_pre_player_removed
--- Called before a player is removed (deleted) from the game. Not to be confused with the player logging of this is
--- different in that the player is deleted as if he never existed in the save file.

--- @shape on_pre_player_removed_data : EventData
--- @field player_index uint             The player index that will be removed


--- @class on_pre_player_toggled_map_editor
--- Called before a player toggles the map editor on or off.

--- @shape on_pre_player_toggled_map_editor_data : EventData
--- @field player_index uint             


--- @class on_pre_robot_exploded_cliff
--- Called directly before a robot explodes cliffs.

--- @shape on_pre_robot_exploded_cliff_data : EventData
--- @field robot LuaEntity               
--- @field cliff LuaEntity               
--- @field item LuaItemPrototype         The cliff explosive used.


--- @class on_pre_script_inventory_resized
--- Called just before a script inventory is resized.

--- @shape on_pre_script_inventory_resized_data : EventData
--- @field player_index uint | nil       (Optional)  If done by console command; the player who ran the command.
--- @field mod string                    The mod that did the resizing. This will be `"core"` if done by console command or scenario script.
--- @field inventory LuaInventory        
--- @field old_size uint                 The old inventory size.
--- @field new_size uint                 The new inventory size.


--- @class on_pre_surface_cleared
--- Called just before a surface is cleared (all entities removed and all chunks deleted).

--- @shape on_pre_surface_cleared_data : EventData
--- @field surface_index uint            


--- @class on_pre_surface_deleted
--- Called just before a surface is deleted.

--- @shape on_pre_surface_deleted_data : EventData
--- @field surface_index uint            


--- @class on_research_finished
--- Called when a research finishes.

--- @shape on_research_finished_data : EventData
--- @field research LuaTechnology        The researched technology
--- @field by_script boolean             If the technology was researched by script.


--- @class on_research_reversed
--- Called when a research is reversed (unresearched).

--- @shape on_research_reversed_data : EventData
--- @field research LuaTechnology        The technology un-researched
--- @field by_script boolean             If the technology was un-researched by script.


--- @class on_research_started
--- Called when a technology research starts.

--- @shape on_research_started_data : EventData
--- @field research LuaTechnology        The technology being researched
--- @field last_research LuaTechnology | nil (Optional)  


--- @class on_resource_depleted
--- Called when a resource entity reaches 0 or its minimum yield for infinite resources.

--- @shape on_resource_depleted_data : EventData
--- @field entity LuaEntity              


--- @class on_robot_built_entity
--- Called when a construction robot builds an entity. Can be filtered using LuaRobotBuiltEntityEventFilter.
--- 
--- @see LuaRobotBuiltEntityEventFilter @

--- @shape on_robot_built_entity_data : EventData
--- @field robot LuaEntity               The robot that did the building.
--- @field created_entity LuaEntity      The entity built.
--- @field stack LuaItemStack            The item used to do the building.
--- @field tags Tags | nil               (Optional)  The tags associated with this entity if any.


--- @class on_robot_built_tile
--- Called after a robot builds tiles.

--- @shape on_robot_built_tile_data : EventData
--- @field robot LuaEntity               The robot.
--- @field tiles OldTileAndPosition[]    The position data.
--- @field tile LuaTilePrototype         The tile prototype that was placed.
--- @field item LuaItemPrototype         The item type used to build the tiles.
--- @field stack LuaItemStack            The stack used to build the tiles (may be empty if all of the items where used to build the tiles).
--- @field surface_index uint            The surface the tile(s) are build on.


--- @class on_robot_exploded_cliff
--- Called directly after a robot explodes cliffs.

--- @shape on_robot_exploded_cliff_data : EventData
--- @field robot LuaEntity               
--- @field item LuaItemPrototype         The cliff explosive used.


--- @class on_robot_mined
--- Called when a robot mines an entity.

--- @shape on_robot_mined_data : EventData
--- @field robot LuaEntity               The robot that did the mining.
--- @field item_stack SimpleItemStack    The entity the robot just picked up.


--- @class on_robot_mined_entity
--- Called after the results of an entity being mined are collected just before the entity is destroyed. After this
--- event any items in the buffer will be transferred into the robot as if they came from mining the entity. Can be
--- filtered using LuaRobotMinedEntityEventFilter.
--- 
--- @see LuaRobotMinedEntityEventFilter @

--- @shape on_robot_mined_entity_data : EventData
--- @field robot LuaEntity               The robot doing the mining.
--- @field entity LuaEntity              The entity that has been mined.
--- @field buffer LuaInventory           The temporary inventory that holds the result of mining the entity.


--- @class on_robot_mined_tile
--- Called after a robot mines tiles.

--- @shape on_robot_mined_tile_data : EventData
--- @field robot LuaEntity               The robot.
--- @field tiles OldTileAndPosition[]    The position data.
--- @field surface_index uint            The surface the tile(s) were mined on.


--- @class on_robot_pre_mined
--- Called before a robot mines an entity. Can be filtered using LuaPreRobotMinedEntityEventFilter.
--- 
--- @see LuaPreRobotMinedEntityEventFilter @

--- @shape on_robot_pre_mined_data : EventData
--- @field robot LuaEntity               The robot that's about to do the mining.
--- @field entity LuaEntity              The entity which is about to be mined.


--- @class on_rocket_launch_ordered
--- Called when a rocket silo is ordered to be launched.

--- @shape on_rocket_launch_ordered_data : EventData
--- @field rocket LuaEntity              
--- @field rocket_silo LuaEntity         
--- @field player_index uint | nil       (Optional)  The player that is riding the rocket, if any.


--- @class on_rocket_launched
--- Called when the rocket is launched.

--- @shape on_rocket_launched_data : EventData
--- @field rocket LuaEntity              
--- @field rocket_silo LuaEntity | nil   (Optional)  
--- @field player_index uint | nil       (Optional)  The player that is riding the rocket, if any.


--- @class on_runtime_mod_setting_changed
--- Called when a runtime mod setting is changed by a player.

--- @shape on_runtime_mod_setting_changed_data : EventData
--- @field player_index uint | nil       (Optional)  If the `setting_type` is `"global"` and it was changed through the mod settings GUI, this is the index of the player that changed the global setting. If the `setting_type` is `"runtime-per-user"` and it changed a current setting of the player, this is the index of the player whose setting was changed. In all other cases, this is `nil`.
--- @field setting string                The prototype name of the setting that was changed.
--- @field setting_type string           Either "runtime-per-user" or "runtime-global".


--- @class on_script_inventory_resized
--- Called just after a script inventory is resized.

--- @shape on_script_inventory_resized_data : EventData
--- @field player_index uint | nil       (Optional)  If done by console command; the player who ran the command.
--- @field mod string                    The mod that did the resizing. This will be `"core"` if done by console command or scenario script.
--- @field inventory LuaInventory        
--- @field old_size uint                 The old inventory size.
--- @field new_size uint                 The new inventory size.
--- @field overflow_inventory LuaInventory Any items which didn't fit into the new inventory size.


--- @class on_script_path_request_finished
--- Called when a LuaSurface::request_path call completes.
--- 
--- @see LuaSurface#request_path @

--- @shape on_script_path_request_finished_data : EventData
--- @field path PathfinderWaypoint[] | nil (Optional)  The actual path that the pathfinder has determined. `nil` if pathfinding failed.
--- @field id uint                       Handle to associate the callback with a particular call to [LuaSurface::request_path](LuaSurface::request_path).
--- @field try_again_later boolean       Indicates that the pathfinder failed because it is too busy, and that you can retry later.


--- @class on_script_trigger_effect
--- Called when a script trigger effect is triggered.

--- @shape on_script_trigger_effect_data : EventData
--- @field effect_id string              The effect_id specified in the trigger effect.
--- @field surface_index uint            The surface the effect happened on.
--- @field source_position MapPosition | nil (Optional)  
--- @field source_entity LuaEntity | nil (Optional)  
--- @field target_position MapPosition | nil (Optional)  
--- @field target_entity LuaEntity | nil (Optional)  


--- @class on_sector_scanned
--- Called when an entity of type `radar` finishes scanning a sector. Can be filtered for the radar using
--- LuaSectorScannedEventFilter.
--- 
--- @see LuaSectorScannedEventFilter @

--- @shape on_sector_scanned_data : EventData
--- @field radar LuaEntity               The radar that did the scanning.
--- @field chunk_position ChunkPosition  The chunk scanned.
--- @field area BoundingBox              Area of the scanned chunk.


--- @class on_selected_entity_changed
--- Called after the selected entity changes for a given player.

--- @shape on_selected_entity_changed_data : EventData
--- @field player_index uint             The player whose selected entity changed.
--- @field last_entity LuaEntity | nil   (Optional)  The last selected entity if it still exists and there was one.


--- @class on_spider_command_completed
--- Called when a spider finishes moving to its autopilot position.

--- @shape on_spider_command_completed_data : EventData
--- @field vehicle LuaEntity             Spider vehicle which was requested to move.


--- @class on_string_translated
--- Called when a translation request generated through LuaPlayer::request_translation is translated.
--- 
--- @see LuaPlayer#request_translation @

--- @shape on_string_translated_data : EventData
--- @field player_index uint             The player whose locale was used for the translation.
--- @field localised_string LocalisedString The localised string being translated.
--- @field result string                 The translated `localised_string`.
--- @field translated boolean            Whether the requested localised string was valid and could be translated.


--- @class on_surface_cleared
--- Called just after a surface is cleared (all entities removed and all chunks deleted).

--- @shape on_surface_cleared_data : EventData
--- @field surface_index uint            


--- @class on_surface_created
--- Called when a surface is created.

--- @shape on_surface_created_data : EventData
--- @field surface_index uint            


--- @class on_surface_deleted
--- Called after a surface is deleted.

--- @shape on_surface_deleted_data : EventData
--- @field surface_index uint            


--- @class on_surface_imported
--- Called after a surface is imported.

--- @shape on_surface_imported_data : EventData
--- @field surface_index uint            
--- @field original_name string          The original surface name.


--- @class on_surface_renamed
--- Called when a surface is renamed.

--- @shape on_surface_renamed_data : EventData
--- @field surface_index uint            
--- @field old_name string               
--- @field new_name string               


--- @class on_technology_effects_reset
--- Called when LuaForce::reset_technology_effects is finished.
--- 
--- @see LuaForce#reset_technology_effects @

--- @shape on_technology_effects_reset_data : EventData
--- @field force LuaForce                


--- @class on_tick
--- It is fired once every tick. Since this event is fired every tick, its handler shouldn't include performance heavy
--- code.

--- @shape on_tick_data : EventData


--- @class on_train_changed_state
--- Called when a train changes state (started to stopped and vice versa)

--- @shape on_train_changed_state_data : EventData
--- @field train LuaTrain                
--- @field old_state defines_train_state 


--- @class on_train_created
--- Called when a new train is created either through disconnecting/connecting an existing one or building a new one.

--- @shape on_train_created_data : EventData
--- @field train LuaTrain                
--- @field old_train_id_1 uint | nil     (Optional)  The first old train id when splitting/merging trains.
--- @field old_train_id_2 uint | nil     (Optional)  The second old train id when splitting/merging trains.


--- @class on_train_schedule_changed
--- Called when a trains schedule is changed either by the player or through script.

--- @shape on_train_schedule_changed_data : EventData
--- @field train LuaTrain                
--- @field player_index uint | nil       (Optional)  The player who made the change if any.


--- @class on_trigger_created_entity
--- Called when an entity with a trigger prototype (such as capsules) create an entity AND that trigger prototype
--- defined `trigger_created_entity="true"`.

--- @shape on_trigger_created_entity_data : EventData
--- @field entity LuaEntity              
--- @field source LuaEntity | nil        (Optional)  


--- @class on_trigger_fired_artillery
--- Called when an entity with a trigger prototype (such as capsules) fire an artillery projectile AND that trigger
--- prototype defined `trigger_fired_artillery="true"`.

--- @shape on_trigger_fired_artillery_data : EventData
--- @field entity LuaEntity              
--- @field source LuaEntity | nil        (Optional)  


--- @class on_unit_added_to_group
--- Called when a unit is added to a unit group.

--- @shape on_unit_added_to_group_data : EventData
--- @field unit LuaEntity                
--- @field group LuaUnitGroup            


--- @class on_unit_group_created
--- Called when a new unit group is created, before any members are added to it.

--- @shape on_unit_group_created_data : EventData
--- @field group LuaUnitGroup            


--- @class on_unit_group_finished_gathering
--- Called when a unit group finishes gathering and starts executing its command.

--- @shape on_unit_group_finished_gathering_data : EventData
--- @field group LuaUnitGroup            


--- @class on_unit_removed_from_group
--- Called when a unit is removed from a unit group.

--- @shape on_unit_removed_from_group_data : EventData
--- @field unit LuaEntity                
--- @field group LuaUnitGroup            


--- @class on_worker_robot_expired
--- Called when a worker (construction or logistic) robot expires through a lack of energy.

--- @shape on_worker_robot_expired_data : EventData
--- @field robot LuaEntity               


--- @class script_raised_built
--- A static event mods can use to tell other mods they built something by script. This event is only raised if a mod
--- does so with LuaBootstrap::raise_event or LuaBootstrap::raise_script_built, or when `raise_built` is passed to
--- LuaSurface::create_entity. Can be filtered using LuaScriptRaisedBuiltEventFilter.
--- 
--- @see LuaSurface#create_entity @
--- @see LuaBootstrap#raise_script_built @
--- @see LuaBootstrap#raise_event @
--- @see LuaScriptRaisedBuiltEventFilter @

--- @shape script_raised_built_data : EventData
--- @field entity LuaEntity              The entity that has been built.


--- @class script_raised_destroy
--- A static event mods can use to tell other mods they destroyed something by script. This event is only raised if a
--- mod does so with LuaBootstrap::raise_event or LuaBootstrap::raise_script_destroy, or when `raise_destroy` is passed
--- to LuaEntity::destroy. Can be filtered using LuaScriptRaisedDestroyEventFilter.
--- 
--- @see LuaEntity#destroy @
--- @see LuaBootstrap#raise_script_destroy @
--- @see LuaBootstrap#raise_event @
--- @see LuaScriptRaisedDestroyEventFilter @

--- @shape script_raised_destroy_data : EventData
--- @field entity LuaEntity              The entity that was destroyed.


--- @class script_raised_revive
--- A static event mods can use to tell other mods they revived something by script. This event is only raised if a mod
--- does so with LuaBootstrap::raise_event or LuaBootstrap::raise_script_revive, or when `raise_revive` is passed to
--- LuaEntity::revive. Can be filtered using LuaScriptRaisedReviveEventFilter.
--- 
--- @see LuaEntity#revive @
--- @see LuaBootstrap#raise_script_revive @
--- @see LuaBootstrap#raise_event @
--- @see LuaScriptRaisedReviveEventFilter @

--- @shape script_raised_revive_data : EventData
--- @field entity LuaEntity              The entity that was revived.
--- @field tags Tags | nil               (Optional)  The tags associated with this entity, if any.


--- @class script_raised_set_tiles
--- A static event mods can use to tell other mods they changed tiles on a surface by script. This event is only raised
--- if a mod does so with LuaBootstrap::raise_event or LuaBootstrap::raise_script_set_tiles, or when `raise_event` is
--- passed to LuaSurface::set_tiles.
--- 
--- @see LuaSurface#set_tiles @
--- @see LuaBootstrap#raise_script_set_tiles @
--- @see LuaBootstrap#raise_event @

--- @shape script_raised_set_tiles_data : EventData
--- @field surface_index uint            The surface whose tiles were changed.
--- @field tiles Tile[]                  The tiles that were changed.


